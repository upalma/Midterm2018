Please answer the below Data Structure Questions:

why do we need data structure?

A.In order to locate and retrieve  data it is required to have data in a structured form.Structured form of data makes

retrieval and manipulation easy.


What are the various operations that can be performed on different Data Structures?

A.1. Searching

            2. Sorting

            3. Insertion

            4. Deletion

            5. Merging

            6. Traversing

List out the areas in which data structures are applied extensively?

A.Compiler Design,

            1. Operating System,

            2. Database Management System,

            3. Statistical analysis package,

            4. Numerical Analysis,

            5. Graphics,

            6. Artificial Intelligence,

            7. Simulation

what is an Array?

A.An array in programming is a collection of data/value which has index associated with it.An array shall contain similar

types of data, an array can be sorted or un sorted.


what is the difference between the Array and ArrayList?

A. 1. Array length if fixed but arraylist is dynamic.

       2. Array members are accessed using [], but ArrayList has a set of methods

          to access elements and modify them as because aerialist is collection of framework in java.

       3. Array can store primitive variables and objects but arraylist can store oly Objects.


what is LinkedList?

A.A linked list is linear data Structure where each element is a separate object which is called node. Each node has

data and reference to the next node. Last node has reference to null.

How is an Array different from Linked List?

A.1. An array element is having index number, but a node is having reference to next node.

       2. In array each element is independent, does not have any connection to the other element

          on the other hand in linked list each node are connected by previous node.

       3. In Linked list, location or address of elements is stored in the link part of previous

          element/node. In array, no pointers are used like linked list so no need of extra space

          in memory for pointer.

       4. Linked list consumed extra memory as the link location need to be saved in in the linked

          part of the previous elements in case of array it is not required.

what is queue?

A.It is a linear data structure where elements can be accessed  ob the basis of FIFO.


what is stack?

A.Stack is linear data structure where elements can be accessed on the basis of LIFO.


what is FIFO and LIFO?

A.FIFO: First in first out. Example: In Queue data can be accessed by FIFO method.LIFO: Last in first out. Example:

In Stack elements can be accessed on the basis of LIFO.


what is the order of complexity?

A.For input is of size N, we can say that the algorithm will finish at O(1), O(N), O(N^2), O(N^3), O(N*log(N)) etc.

what is the best case to search an element from an array?

A.Best case - you find it (assuming you only need to find one) on the first comparison.

what is the worst case to search an element from an array?

A.



what is tree in data structure?

A.A tree is a nonlinear data structure where as arrays, linked lists, stacks and queues which are linear data structures.

It can be empty of nodes or a tree can be a structure consisting of one node called the root and zero or one or more

sub-trees.


what is graph in data structure?

A.It is a non-linear data structure that has nodes and edges. The nodes also referred to as vertices and the edges are

lines or arcs that connects the two nodes inside the graph. Simply put a graph contains finite set of vertices and set

of edges which connect a pair of nodes.


what is the difference between the HashTable and HashMap?

A.HashTable is synchronized, however HashMap is not. Therefore it makes HashMap efficient with non-threaded applications

because unsynchronized Objects perform better than synchronized objects. HashTable do not allow null keys or values

where as HashMap does allow one null key and unlimited null values.


What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.

A.The pertinent data structures that are used, for RDBMS is Array, for example Array of structures. Regarding network

data model, graph is used and for hierarchical data model, trees are used.


What is ArrayIndexOutOfBoundsException in java? When it occurs?

A.The index of an array is an integer value that has value in interval [0, n-1], where n is the size of the array.

If a request for a negative or an index greater than or equal to size of array is made then java throws an Array

IndexOutOfBounds Exception. It is a Runtime Exception occurs during runtime, JVC does not check for this error during

the compilation of a program.


How HashMap works in java?

A.HashMap is a class that is used for storing keys and value pairs.It is the process of converting an object into

integer form by using the method hashCode(),therefore it is cirtical to write hashCode() method properly for better

performance of HashMap.


What are the different ways of copying an array into another array?

A.The multiple ways to copying elements of an array into another array are: to copy Manually,Arrays.copyOf(),

System.arraycopy(), Object.clone(), and Arrays.copyOfRange().

What is difference between an array and a linked list?

A.An array functions by contiguous memory locations allocated at compile time, i.e. at the time of declaration of array.

However, a linked list memory is assigned when data is added to it which means at runtime. Array is a collection of

elements having same data type with common name.Linkedlist is an ordered collection of elements which are connected by

links and pointers.


What is DFS and BFS?

A.BFS memory expenditure is higher depending on the branching factor, but BFS is a complete algorithm. Therefore, if we

are using it to search for something in the lowest depth possible then BFS will provide the best possible solution. DFS

is much better about space than BFS,however, it may find a subpar solution. Meaning, if we are searching for a path from

one vertex to another then we may find the suboptimal solution and it should suffice.


What is Recursion?

A.It is the process where a method calls itself directly or indirectly is known as recursion so the corresponding

function is called as recursive function.

What are linear and non linear data Structures?

A.If data items are not organized then it is called non linear data structure. Consequently, the opposite holds true

in linear data structure where items are organized

What is Big-(O)-notation?

A.It is the language that we use to determine how long an algorithm will take to run; this is how we compare the

efficacy of multiple approaches to solving a problem.


Outlined different kind of sorting algorithm with time complexity?

A.There are eight kinds of sorting algorithm associated with time complexity, such as:  insertion sort, merge sort,

selection sort, bubble sort, heap sort, quick sort, bucket sort, and radix sort.

Outlined different kind of sorting algorithm with time complexity?

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

         Data Structure	    Time Complexity
                            Average	                                        Worst
                            Access	    Search	    Insertion	Deletion	Access	    Search	    Insertion	Deletion
         Array	            Θ(1)	    Θ(n)	    Θ(n)	    Θ(n)	    O(1)	    O(n)	    O(n)	    O(n)
         Stack	            Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
         Queue	            Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
         Singly-Linked List	Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
         Doubly-Linked List	Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
         Skip List	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
         Hash Table	        N/A	        Θ(1)	    Θ(1)	    Θ(1)	    N/A	        O(n)	    O(n)	    O(n)
         Binary Search Tree	Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
         Cartesian Tree	    N/A	        Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(n)	    O(n)	    O(n)
         B-Tree	            Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
         Red-Black Tree	    Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
         Splay Tree	        N/A	        Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(log(n))	O(log(n))	O(log(n))
         AVL Tree	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
         KD Tree 	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
